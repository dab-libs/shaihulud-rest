{{ writeFile(controllerFolder ~ SEPARATOR ~ 'IntOperations.php') }}
<?php declare(strict_types=1);

namespace {{ controllerNamespace }};

use Exception;

class IntOperations {
  /**
   * @param ?string $value
   * @return mixed
   */
  public static function decode(?string $value): mixed {
    if ($value === null) {
      return null;
    }
    return json_decode($value);
  }

  /**
   * @param mixed $decoded
   * @param string $name
   * @param bool $required
   * @param int|null $maximum
   * @param bool $exclusiveMaximum
   * @param int|null $minimum
   * @param bool $exclusiveMinimum
   * @param float|null $multipleOf
   * @return void
   * @throws Exception
   */
  public static function validate(mixed $decoded, string $name, bool $required,
                                  ?int $maximum, bool $exclusiveMaximum,
                                  ?int $minimum, bool $exclusiveMinimum,
                                  ?float $multipleOf): void {
    if ($decoded === null) {
      if ($required === true) {
        throw new Exception($name . ' is not found');
      }
      return;
    }
    if (!is_int($decoded)) {
      throw new Exception($name . ' is not a int');
    }
    self::validateMaximum($decoded, $name, $maximum, $exclusiveMaximum);
    self::validateMinimum($decoded, $name, $minimum, $exclusiveMinimum);
    self::validateMultipleOf($decoded, $name, $multipleOf);
  }

  public static function create(mixed $decoded): ?int {
    if ($decoded === null) {
      return null;
    }
    return intval($decoded);
  }

  /**
   * @param int $value
   * @param string $name
   * @param float|null $maximum
   * @param bool $exclusiveMaximum
   * @throws Exception
   */
  private static function validateMaximum(int $value, string $name, ?float $maximum, bool $exclusiveMaximum): void {
    if ($maximum === null) {
      return;
    }
    if ($exclusiveMaximum) {
      if ($value >= $maximum) {
        throw new Exception($name . ' is great or equal then ' . $maximum);
      }
    }
    else {
      if ($value > $maximum) {
        throw new Exception($name . ' is great then ' . $maximum);
      }
    }
  }

  /**
   * @param int $value
   * @param string $name
   * @param float|null $minimum
   * @param bool $exclusiveMinimum
   * @throws Exception
   */
  private static function validateMinimum(int $value, string $name, ?float $minimum, bool $exclusiveMinimum): void {
    if ($minimum === null) {
      return;
    }
    if ($exclusiveMinimum) {
      if ($value <= $minimum) {
        throw new Exception($name . ' is little or equal then ' . $minimum);
      }
    }
    else {
      if ($value < $minimum) {
        throw new Exception($name . ' is little then ' . $minimum);
      }
    }
  }

  /**
   * @param int $value
   * @param string $name
   * @param float|null $multipleOf
   * @return void
   * @throws Exception
   */
  private static function validateMultipleOf(int $value, string $name, ?float $multipleOf): void {
    if ($multipleOf === null) {
      return;
    }
    if ($value % $multipleOf !== null) {
      throw new Exception($name . ' is not multiple of ' . $multipleOf);
    }
  }
}