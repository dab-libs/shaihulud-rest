{% for pathsByRouteEntry in paths %}
{%   set route = pathsByRouteEntry.key %}
{%   set requestsByMethod = pathsByRouteEntry.value %}
{%   for requestsByMethodEntry in requestsByMethod %}
{%     set request = requestsByMethodEntry.value %}
{%     set actionType = actionType(request) %}
{%     set controllerType = controllerType(request) %}
{%     set method = methodName(request) %}
{{     writeFile(controllerFolder ~ SEPARATOR ~ controllerType ~ '.php') }}
<?php declare(strict_types=1);


namespace {{ controllerNamespace }};


use Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use {{ apiNamespace ~ BACK_SLASH ~ actionType }};

class {{ controllerType }} {
  private {{ actionType }} $action;

  public function __construct({{ actionType }} $action) {
    $this->action = $action;
  }

  public function {{ method }}(Request $request): Response {
    try {
{%     for parameter in request.parameters %}
      ${{ parameter.name }}Parsed = {{ operationsType(parameter.schema, parameter.name, request.operationId) }}::parse($this->getRequestParameter($request, '{{ parameter.name }}', '{{ parameter['in'] }}'));
      {{ operationsType(parameter.schema, parameter.name, request.operationId) }}::validate(parsed: ${{ parameter.name }}Parsed, name: '{{ parameter.name }}', {{ typeOptions(parameter.name, parameter.required, parameter.schema, components.schemas) }});
      ${{ parameter.name }} = {{ operationsType(parameter.schema, parameter.name, request.operationId) }}::create(${{ parameter.name }}Parsed{{ arrayItemCreator(parameter.schema) }});

{%     endfor %}
{%     if request contains 'requestBody' %}
{%       if request.requestBody.content['application/json'] == null %}
{{         halt('Can not be generated code for content is not \'application/json\'') }}
{%       endif %}
{%       set schema = request.requestBody.content['application/json'].schema %}
{%       set type = type(schema, 'body', request.operationId) %}
      $bodyParsed = {{ operationsType(schema, 'body', request.operationId) }}::parse($request->getContent());
      {{ operationsType(schema, 'body', request.operationId) }}::validate(parsed: $bodyParsed, name: 'body', {{ typeOptions('body', true, schema, components.schemas) }});
      $body = {{ operationsType(schema, 'body', request.operationId) }}::create($bodyParsed{{ arrayItemCreator(schema) }});
{%     endif %}

      $listPetsResponse = $this->action->{{ method }}(
{%     for parameter in request.parameters %}
        ${{ parameter.name }},
{%     endfor %}
{%     if request.requestBody.content['application/json'] != null %}
        $body,
{%     endif %}
      );
    }
    catch (Exception $exception) {
      $listPetsResponse = $this->action->createExceptedResult($exception);
    }

    return ListPetsResultOperations::createResponse($listPetsResponse);
  }

  private function getRequestParameter(Request $request, string $name, string $in): ?string {
    switch ($in) {
      case 'path':
        return $request->attributes->get($name);
      case 'query':
        return $request->query->get($name);
      case 'header':
        return $request->headers->get($name);
      case 'cookie':
        return $request->cookies->get($name);
    }
    return null;
  }
}
{%   endfor %}
{% endfor %}