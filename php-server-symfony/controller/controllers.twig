{% for pathsByRouteEntry in paths %}
{%   set route = pathsByRouteEntry.key %}
{%   set requestsByMethod = pathsByRouteEntry.value %}
{%   for requestsByMethodEntry in requestsByMethod %}
{%     set request = requestsByMethodEntry.value %}
{%     set actionType = actionType(request) %}
{%     set controllerType = controllerType(request) %}
{%     set method = methodName(request) %}
{{     writeFile(controllerFolder ~ SEPARATOR ~ controllerType ~ '.php') }}
<?php declare(strict_types=1);


namespace {{ controllerNamespace }};


use Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use {{ apiNamespace ~ BACK_SLASH ~ actionType }};
{%     for responseEntry in request.responses %}
{%       set statusCode = responseEntry.key %}
{%       set response = responseEntry.value %}
{%       if response.content != null and response.content['application/json'] == null %}
{{         halt('Can not be generated code. ' ~ request.operationId ~ '.responses.' ~ statusCode ~ '.content is not \'application/json\'') }}
{%       endif %}
{%       set resultType = resultType(request, statusCode) %}
use {{ apiNamespace ~ BACK_SLASH ~ resultType }};
{%     endfor %}

class {{ controllerType }} {
  private {{ actionType }} $action;

  public function __construct({{ actionType }} $action) {
    $this->action = $action;
  }

  public function {{ method }}(Request $request): Response {
    try {
{%     for parameter in request.parameters %}
      ${{ parameter.name }}Decoded = {{ operationsType(parameter.schema, parameter.name, request.operationId) }}::decode($this->getRequestParameter($request, '{{ parameter.name }}', '{{ parameter['in'] }}'));
      {{ operationsType(parameter.schema, parameter.name, request.operationId) }}::validate(decoded: ${{ parameter.name }}Decoded, name: '{{ parameter.name }}', {{ typeOptions(parameter.name, parameter.required, parameter.schema, components.schemas) }});
      ${{ parameter.name }} = {{ operationsType(parameter.schema, parameter.name, request.operationId) }}::create(${{ parameter.name }}Decoded{{ arrayItemCreator(parameter.schema) }});

{%     endfor %}
{%     if request contains 'requestBody' %}
{%       if request.requestBody.content['application/json'] == null %}
{{         halt('Can not be generated code. ' ~ request.operationId ~ '.requestBody.content is not \'application/json\'') }}
{%       endif %}
{%       set schema = request.requestBody.content['application/json'].schema %}
{%       set type = type(schema, 'body', request.operationId) %}
      $bodyDecoded = {{ operationsType(schema, 'body', request.operationId) }}::decode($request->getContent());
      {{ operationsType(schema, 'body', request.operationId) }}::validate(decoded: $bodyDecoded, name: 'body', {{ typeOptions('body', true, schema, components.schemas) }});
      $body = {{ operationsType(schema, 'body', request.operationId) }}::create($bodyDecoded{{ arrayItemCreator(schema) }});
{%     endif %}

      $result = $this->action->{{ method }}(
{%     for parameter in request.parameters %}
        ${{ parameter.name }},
{%     endfor %}
{%     if request.requestBody.content['application/json'] != null %}
        $body,
{%     endif %}
      );
    }
    catch (Exception $exception) {
      $result = $this->action->createExceptedResult($exception);
    }

{%     for responseEntry in request.responses %}
{%       set statusCode = responseEntry.key %}
{%       set response = responseEntry.value %}
{%       if response.content != null and response.content['application/json'] == null %}
{{         halt('Can not be generated code. ' ~ request.operationId ~ '.responses.' ~ statusCode ~ '.content is not \'application/json\'') }}
{%       endif %}
{%       set resultType = resultType(request, statusCode) %}
{%       if statusCode != 'default' %}
    if ($result instanceof {{ resultType }}) {
      return new Response(json_encode($result->content), {{ statusCode }}, [
{%         for headerEntry in response.headers %}
{%           set headerName = headerEntry.key %}
{%           set headerFieldName = headerEntry.key | camelCase %}
{%           set header = headerEntry.value %}
{%           set headerType = type(header.schema, headerFieldName, headersType) %}
{%           set nullable = header.required ? '' : '?' %}
        '{{ headerName }}' => json_encode($result->headers->{{ headerFieldName }}),
{%         endfor %}
      ]);
    }
{%       endif %}
{%     endfor %}

{%     for responseEntry in request.responses %}
{%       set statusCode = responseEntry.key %}
{%       set response = responseEntry.value %}
{%       if response.content != null and response.content['application/json'] == null %}
{{         halt('Can not be generated code. ' ~ request.operationId ~ '.responses.' ~ statusCode ~ '.content is not \'application/json\'') }}
{%       endif %}
{%       set resultType = resultType(request, statusCode) %}
{%       if statusCode == 'default' %}
    if ($result instanceof {{ resultType }}) {
      return new Response(json_encode($result->content), $result->statusCode, [
{%         for headerEntry in response.headers %}
{%           set headerName = headerEntry.key %}
{%           set headerFieldName = headerEntry.key | camelCase %}
{%           set header = headerEntry.value %}
{%           set headerType = type(header.schema, headerFieldName, headersType) %}
{%           set nullable = header.required ? '' : '?' %}
        '{{ headerName }}' => json_encode($result->headers->{{ headerFieldName }}),
{%         endfor %}
      ]);
    }
{%       endif %}
{%     endfor %}

    return new Response('', 500);
  }

  private function getRequestParameter(Request $request, string $name, string $in): ?string {
    switch ($in) {
      case 'path':
        return $request->attributes->get($name);
      case 'query':
        return $request->query->get($name);
      case 'header':
        return $request->headers->get($name);
      case 'cookie':
        return $request->cookies->get($name);
    }
    return null;
  }
}
{%   endfor %}
{% endfor %}