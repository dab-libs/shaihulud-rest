{{ writeFile(controllerFolder ~ SEPARATOR ~ 'StringOperations.php') }}
<?php declare(strict_types=1);


namespace {{ controllerNamespace }};


use Exception;

class StringOperations {
  /**
   * @param ?string $value
   * @return mixed
   */
  public static function parse(?string $value): mixed {
    return $value;
  }

  /**
   * @param mixed $parsed
   * @param string $name
   * @param bool $required
   * @param int $minLength
   * @param int|null $maxLength
   * @return void
   * @throws Exception
   */
  public static function validate(mixed $parsed, string $name, bool $required, int $minLength, ?int $maxLength): void {
    if ($parsed === null) {
      if ($required) {
        throw new Exception($name . ' is not found');
      }
      return;
    }
    if (!is_string($parsed)) {
      throw new Exception($name . ' is not a float');
    }
    self::validateMaxLength($parsed, $name, $maxLength);
    self::validateMinLength($parsed, $name, $minLength);
  }

  public static function create(mixed $parsed): ?string {
    if ($parsed === null) {
      return null;
    }
    return strval($parsed);
  }

  /**
   * @param string $value
   * @param string $name
   * @param int $maxLength
   * @throws Exception
   */
  private static function validateMaxLength(string $value, string $name, int $maxLength): void {
    if ($maxLength !== null && strlen($value) > $maxLength) {
      throw new Exception($name . ' is too long. Its length is greater then ' . $maxLength);
    }
  }

  /**
   * @param string $value
   * @param string $name
   * @param int $minLength
   * @throws Exception
   */
  private static function validateMinLength(string $value, string $name, int $minLength): void {
    if (strlen($value) > $minLength) {
      throw new Exception($name . ' is too short. Its length is littler then ' . $minLength);
    }
  }
}
